<?php
/* $Id$ */

/**
 * @file
 * Adds a voting widget to nodes.
 */

/**
 * Implementation of hook_perm().
 */
function vud_node_perm() {
  return array('view up/down votes', 'use vote up/down', 'access vote up/down statistics', 'administer vote up/down');
}

/**
 * Implementation of hook_menu().
 */
function vud_node_menu() {
  $items = array();

  $items['admin/settings/voteupdown/node'] = array(
    'title' => 'Node',
    'description' => 'Vote Up/Down Node settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vud_node_admin_settings'),
    'access arguments' => array('administer vote up/down'),
    'type' => MENU_LOCAL_TASK,
  );

  // vote_up_down/$type/$cid/$value/$tag/$ajax/$alt
  $items['vote_up_down'] = array(
    'title' => 'Vote',
    'page callback' => 'vote_up_down_vote',
    'access arguments' => array('use vote up/down'),
    'type' => MENU_CALLBACK,
  );

  $items['voteupdown'] = array(
    'title' => 'Voting statistics',
    'page callback' => 'vote_up_down_page',
    'access arguments' => array('access vote up/down statistics'),
  );

  $items['voteupdown/usersvotes'] = array(
    'title' => 'Users by votes',
    'page callback' => 'vote_up_down_page',
    'access arguments' => array('access vote up/down statistics'),
  );

  $items['node/%node/votes'] = array(
    'title' => 'Voting details',
    'page callback' => 'vote_up_down_tracker',
    'page arguments' => array(1),
    'access callback' => 'vote_up_down_node_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%user/votesupdown'] = array(
    'title' => 'Your votes',
    'page callback' => 'vote_up_down_user_votes',
    'page arguments' => array(1),
    'access arguments' => array('access vote up/down statistics'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Advanced menu settings callback.
 */
function vud_node_admin_settings() {
  $form['vote_node_types'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node types'),
    '#description' => t('Select the node types you want to activate voting on.'),
  );
  $form['vote_node_types']['vote_up_down_node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Types'),
    '#default_value' => variable_get('vote_up_down_node_types', array()),
    '#options' => node_get_types('names'),
  );

  $form['vote_widget_settings_node'] = array(
    '#type' => 'fieldset',
    '#title' => t('Vote widget settings for nodes'),
    '#description' => t('For more control over the voting widget placement, it can be inserted directly in the theme. See the included template.php and node-storylink.tpl.php for an example. When this method is used, turn off the widget display here.'),
  );
  $form['vote_widget_settings_node']['vote_up_down_widget_style_node'] = array(
    '#type' => 'radios',
    '#title' => t('Vote widget style'),
    '#default_value' => variable_get('vote_up_down_widget_style_node', 0),
    '#options' => array(0 => t('Default +1/-1 vote style'), 1 => t('Alternative +1 vote style')),
    '#description' => t('If set to alternative style, it\'s recomended to turn off the link display of vote points.'),
  );
  $form['vote_widget_settings_node']['vote_up_down_widget_node'] = array(
    '#type' => 'select',
    '#title' => t('Vote widget display'),
    '#default_value' => variable_get('vote_up_down_widget_node', 3),
    '#options' => array(0 => t('Disabled'), 1 => t('Teaser view'), 2 => t('Full-page view'), 3 => t('Teasers and full-page view')),
    '#description' => t('When to display the vote widget for nodes?'),
  );
  $form['vote_widget_settings_node']['vote_up_down_link_node'] = array(
    '#type' => 'select',
    '#title' => t('Link display of vote points'),
    '#default_value' => variable_get('vote_up_down_link_node', 3),
    '#options' => array(0 => t('Disabled'), 1 => t('Teaser view'), 2 => t('Full-page view'), 3 => t('Teasers and full-page view')),
    '#description' => t('When to display vote points for nodes?'),
  );

  return system_settings_form($form);
}

// Start mindless data movement...

/**
 * Implementation of hook_block().
 */

/* function vote_up_down_block($op = 'list', $delta = 0) { */
/*   if ($op == 'list') { */
/*     $blocks[0]['info'] = t('Who voted on this?'); */
/*     return $blocks; */
/*   } */

/*   if ($op == 'view') { */
/*     if (user_access('access content')) { */
/*       switch ($delta) { */
/*         case 0: */
/*           if (arg(0) == 'node' & is_numeric(arg(1))) { */
/*             // Check that this node type is enabled for vote_up_down, and if not don't display the block. */
/*             $node = node_load(arg(1)); */
/*             if (!vote_up_down_node_access($node)) { */
/*               return; */
/*             } */
/*             $title = t('Who voted on this?'); */
/*             $nid = arg(1); */
/*             $tag = variable_get('vote_up_down_tag', 'vote'); */
/*             $votes = array('content_id' => $nid, 'tag' => $tag); */
/*             // TODO: support multiple 'tag' in a nested table? */

/*             $voteresults = votingapi_select_votes($votes); */
/*             $output = theme('vote_up_down_whovoted_block', $nid, $voteresults); */
/*           } */
/*           break; */
/*       } */
/*       $block['subject'] = $title; */
/*       $block['content'] = $output; */
/*       return $block; */
/*     } */
/*   } */
/* } */

/**
 * Theme function for the 'Who Voted' block.
 */
/* function theme_vote_up_down_whovoted_block($nid, $voteresults) { */
/*   if ($voteresults) { */
/*     $items = array(); */
/*     foreach ($voteresults as $vote) { */
/*       $account = user_load(array('uid' => $vote['uid'], 'status' => 1)); */
/*       $items[] = theme('username', $account) .' ('. $vote['value'] .')'; */
/*     } */
/*     $output = theme('item_list', $items); */
/*   } */
/*   else { */
/*     $output = t('No one\'s voted yet! Why don\'t you?'); */
/*   } */
/*   return $output; */
/* } */

/*     'vote_up_down_whovoted_block' => array( */
/*       'file' => 'vote_up_down.module', */
/*       'arguments' => array( */
/*         'nid' => NULL, */
/*         'voteresults' => NULL, */
/*       ), */
/*     ), */


/**
 * Implementation of hook_nodeapi().
 */
/* function vote_up_down_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) { */
/*   switch ($op) { */
/*     case 'view': */
/*       if (user_access('view up/down votes')) { */
/*         $node_type = in_array($node->type, variable_get('vote_up_down_node_types', array()), TRUE); */
/*         if ($node_type) { */
/*           $style = variable_get('vote_up_down_widget_style_node', 0) == 1 ? '_alt' : ''; */
/*           if ($teaser && variable_get('vote_up_down_widget_node', 0) && variable_get('vote_up_down_widget_node', 0) != 2) { */
/*             $node->content['vote_up_down'] = array( */
/*               '#value' => theme("vote_up_down_widget$style", $node->nid, 'node'), */
/*               '#weight' => -10, */
/*             ); */
/*           } */
/*           else if (!$teaser && variable_get('vote_up_down_widget_node', 0) > 1) { */
/*             $node->content['vote_up_down'] = array( */
/*               '#value' => theme("vote_up_down_widget$style", $node->nid, 'node'), */
/*               '#weight' => -10, */
/*             ); */
/*           } */
/*         } */
/*       } */
/*       break; */
/*   } */
/* } */
