<?php
// $Id$

/**
 * @file
 * Adds a voting widget to nodes.
 */

/**
 * Implementation of hook_perm().
 */
function vud_node_perm() {
  return array('use vote up/down on nodes', 'administer vote up/down on nodes', 'see vote up/down node stats');
}

/**
 * Implementation of hook_menu().
 */
function vud_node_menu() {
  $items = array();

  $items['admin/settings/voteupdown/node'] = array(
    'title'            => 'Nodes',
    'description'      => 'Vote Up/Down Node settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('vud_node_admin_settings'),
    'access arguments' => array('administer vote up/down on nodes'),
    'weight'           => -10,
    'type'             => MENU_LOCAL_TASK,
  );

  $items['node/%node/votes'] = array(
    'title'            => 'Voting details',
    'page callback'    => 'vud_node_tracker',
    'access arguments' => array('see vote up/down node stats'),
    'type'             => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Advanced menu settings callback.
 */
function vud_node_admin_settings() {
  $form['vud_node_types'] = array(
    '#type'          => 'checkboxes',
    '#title'         => t('Node types'),
    '#description'   => t('Select the node types for which you want to activate voting.'),
    '#default_value' => variable_get('vud_node_types', array()),
    '#options'       => node_get_types('names'),
  );
  $form['vud_node_widget'] = array(
    '#title'         => t('Widget selection'),
    '#description'   => t('Select the voting widget theme that will be displayed.'),
    '#type'          => 'radios',
    '#default_value' => variable_get('vud_node_widget', 'plain'),
    '#options'       => vud_read_widgets(),
  );
  $form['vud_node_widget_show'] = array(
    '#type'          => 'select',
    '#title'         => t('Widget and votes display'),
    '#description'   => t('When will the vote widget be displayed?'),
    '#default_value' => variable_get('vud_node_widget_show', 2),
    '#options'       => array(0 => 'Teaser only', 1 => 'Full display only', 2 => 'Both teaser and full'),
  );
  $form['vud_node_votes'] = array(
    '#type'          => 'select',
    '#description'   => t('When will the total vote count be displayed?'),
    '#default_value' => variable_get('vud_node_votes', 3),
    '#options'       => array(0 => 'Don\'t display', 1 => 'Teaser only', 2 => 'Full display only', 3 => 'Both teaser and full'),
  );
  $form['vud_node_reset'] = array(
    '#type'          => 'radios',
    '#title'         => t('Votes reset'),
    '#description'   => t('Choose if users are allowed to reset their votes on a node.'),
    '#default_value' => variable_get('vud_node_reset', 0),
    '#options'       => array(0 => 'No', 1 => 'Yes'),
  );

return system_settings_form($form);
}

/**
 * Implementation of hook_nodeapi().
 */
function vud_node_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'view':
      if (user_access('use vote up/down on nodes')) {
        $node_type = in_array($node->type, variable_get('vud_node_types', array()), TRUE);
        $widget_showmode = variable_get('vud_node_widget_show', 2);
        $tag = variable_get('vud_tag', 'vote');
        $widget = variable_get('vud_node_widget', 'plain');
        if ($node_type) {
          switch ($widget_showmode) {
            case 0:
              if ($teaser == 1) {
                $node->content['vud_node_widget_display'] = array(
                  '#value' => theme('vud_widget', $node->nid, 'node', $tag, $widget),
                  '#weight' => -10,
                );
              }
              break;
            case 1:
              if ($teaser == 0) {
                $node->content['vud_node_widget_display'] = array(
                  '#value' => theme('vud_widget', $node->nid, 'node', $tag, $widget),
                  '#weight' => -10,
                );
              }
              break;
            case 2:
              $node->content['vud_node_widget_display'] = array(
                '#value' => theme('vud_widget', $node->nid, 'node', $tag, $widget),
                '#weight' => -10,
              );
              break;
          }
        }
      }
  }
}

/**
 * Implementation of hook_theme().
 */
function vud_node_theme() {
  return array(
    'vud_widget' => array(
      'arguments' => array('cid' => NULL, 'type' => NULL, 'tag' => NULL, 'widget_theme' => NULL),
      'function'  => 'vud_widget_proxy',
    ),
    'vud_votes' => array(
      'arguments' => array('cid' => NULL, 'type' => NULL, 'tag' => NULL, 'widget_theme' => NULL),
      'function'  => 'vud_votes_proxy',
    ),
  );
}

/**
 * Menu callback; display all votes for a node.
 */
function vud_node_tracker() {
  if ($node = menu_get_object()) {
    $header = array(
      array('data' => t('User')),
      array('data' => t('Vote')),
      array('data' => t('Date'))
    );
    $tag = variable_get('vud_tag', 'vote');
    $criteria = array('content_type' => 'node', 'content_id' => $node->nid, 'tag' => $tag);
    $votes = votingapi_select_votes($criteria);
    foreach ($votes as $vote) {
      $account = user_load(array('uid' => $vote['uid'], 'status' => 1));
      $rows[] = array(
        theme('username', $account),
        $vote['value'],
        array('data' => format_date($vote['timestamp'], 'small'), 'class' => 'nowrap')
      );
    }
    drupal_set_title(check_plain($node->title));
    $output = theme('table', $header, $rows);
    $output .= theme('pager', NULL, 30);

    return $output;
  }
  else {
    drupal_not_found();
  }
}

/**
 * Implementation of hook_link().
 */
function vud_node_link($type, $object, $teaser = FALSE) {
  $links = array();
  switch ($type) {
    case 'node':
      $node = &$object;
      $votes_display_mode = variable_get('vud_node_votes', 3);
      $node_type = in_array($node->type, variable_get('vud_node_types', array()), TRUE);
      $widget_theme = variable_get('vud_node_widget', 'plain');
      $tag = variable_get('vud_tag', 'vote');
      switch ($votes_display_mode) {
        case 0:
          break;
        case 1:
          if (($teaser == 1) && $node_type && user_access('use vote up/down on nodes')) {
            $links['vud_node_votes_count'] = array(
              'title' => theme('vud_votes', $node->nid, $type, $tag, $widget_theme),
              'html'  => TRUE,
            );
          }
          break;
        case 2:
          if (($teaser == 0) && $node_type && user_access('use vote up/down on nodes')) {
            $links['vud_node_votes_count'] = array(
              'title' => theme('vud_votes', $node->nid, $type, $tag, $widget_theme),
              'html'  => TRUE,
            );
          }
          break;
        case 3:
          if ($node_type && user_access('use vote up/down on nodes')) {
            $links['vud_node_votes_count'] = array(
              'title' => theme('vud_votes', $node->nid, $type, $tag, $widget_theme),
              'html'  => TRUE,
            );
          }
          break;
      }
      if (variable_get('vud_node_reset', 0)) {
        $reset_token = drupal_get_token("votereset/node/$node->nid/$tag");
        $links['vud_node_votes_reset_link'] = array(
          'title' => t('Reset your vote'),
          'href'  => "votereset/node/$node->nid/$tag/$reset_token",
          'html'  => TRUE,
        );
      }
      break;
  }
  return $links;
}
