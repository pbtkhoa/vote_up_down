<?php
// $Id$

/**
 * @file
 * Implements the core voting module.
 */

module_load_include('inc', 'vud', 'vud.theme');  // Include the theme.inc file.
define('VTAG', 'vud');                           // Define the Voting API $tag value.

/**
 * Implementation of hook_help().
 */
function vud_help($path, $arg) {
  switch ($path) {
    case 'admin/help#vud':
      $output .= '<p>'. t('Provides a configurable up/down voting widget for other modules to use.') .'</p>';
      return $output;
  }
}

/**
 * Advanced menu settings callback.
 */
function vud_admin_advanced_settings() {
  $form['vote_widget_settings_advanced'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Advanced settings'),
  );
  $form['vote_widget_settings_advanced']['vud_reset_vote'] = array(
    '#type'          => 'radios',
    '#title'         => t('Allow users to reset their votes'),
    '#default_value' => variable_get('vud_reset_vote', 0),
    '#options'       => array(0 => t('No'), 1 => t('Yes')),
    '#description'   => t('If yes, a link will be displayed on nodes and comments that will allow users to reset their vote.'),
  );
  $form['vote_widget_settings_advanced']['vud_tag'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Voting API tag'),
    '#default_value' => variable_get('vud_tag', 'vud'),
    '#description'   => t('Since Vote Up/Down uses Voting API, all votes will be tagged with this term. (default: vote)<br />This tag is useful is you have deployed various modules that use Voting API. It should always be a unique value. Usually, there is NO need to change this.'),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_menu().
 */
function vud_menu() {
  $items = array();

  $items['admin/settings/voteupdown'] = array(
    'title'            => 'Vote Up/Down',
    'description'      => 'Control the functioning of Vote Up/Down.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('vud_admin_advanced_settings'),
    'access arguments' => array('administer vote up/down'),
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['admin/settings/voteupdown/advanced'] = array(
    'title'  => 'Advanced',
    'type'   => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['vud'] = array(
    'title'            => 'Vote',
    'page callback'    => 'vud_vote',
    'access arguments' => array('use vote up/down'),
    'type'             => MENU_CALLBACK,
  );

  $items['user/%user/votes'] = array(
    'title'            => 'Your votes',
    'page callback'    => 'vud_user_votes',
    'page arguments'   => array(1),
    'access arguments' => array('access vote up/down statistics'),
    'type'             => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Menu callback; display all votes for a user.
 */
function vud_user_votes() {
  if ($account = user_load(array('uid' => arg(1), 'status' => 1))) {
    if ($account->status || user_access('administer users')) {
      $header = array(
        array('data' => t('Node')),
        array('data' => t('Vote')),
        array('data' => t('Date'))
      );
      $sql = db_rewrite_sql("SELECT n.nid, n.title, v.value, v.timestamp FROM {node} n LEFT JOIN {votingapi_vote} v ON n.nid = v.content_id WHERE v.uid = %d AND v.tag = '%s' AND v.content_type = 'node' AND n.status = 1 ORDER BY v.timestamp DESC");
      $result = pager_query($sql, 25, 0, NULL, $account->uid, variable_get('vud_tag', 'vote'));
      while ($node = db_fetch_object($result)) {
        $rows[] = array(
          l($node->title, 'node/'. $node->nid),
          $node->value,
          t('!time ago', array('!time' => format_interval(time() - $node->timestamp)))
        );
      }
      drupal_set_title(check_plain($account->name));
      $output = theme('table', $header, $rows);
      $output .= theme('pager', NULL, 25);

      return $output;
    }
    else {
      drupal_access_denied();
    }
  }
  else {
    drupal_not_found();
  }
}

/**
 * Function for the main voting handler with Ajax support.
 */
function vud_vote($type, $cid, $value, $tag = NULL, $ajax = FALSE, $alt = FALSE) {
  if (is_numeric($cid) && is_numeric($value) && isset($_REQUEST['token']) && drupal_valid_token($_REQUEST['token'], "vud/$type/$cid/$value")) {
    $vote = array();
    // Sanity-check the incoming values.
    if ($value > 0) {
      $vote['value'] = 1;
    }
    else if ($value < 0) {
      $vote['value'] = -1;
    }
    else {
      $vote['value'] = 0;
    }

    $vote['value_type'] = 'points';

    $tag = $tag ? $tag : variable_get('vud_tag', 'vote');
    $vote['tag'] = $tag;

    // Do the voting via Voting API.
    if ($uid = _vud_get_uid()) {
      if ($vote['value'] == 0) {
        $criteria = array('content_type' => $type, 'content_id' => $cid, 'uid' => $uid, 'tag' => $tag);
        votingapi_delete_votes(votingapi_select_votes($criteria));
        votingapi_recalculate_results($type, $cid);
      }
      else {
        $vote['content_id'] = $cid;
        $vote['content_type'] = $type;
        $vote['uid'] = $uid;
        $votes = array(0 => $vote);
        votingapi_set_votes($votes);
      }
    }

    if ($ajax) {
      $style = ($alt == TRUE ? 'alt' : '');
      print theme('vud_points', $cid, $type, NULL, $style);
      exit();
    }
    else {
      drupal_goto(drupal_get_destination());
    }
  }
}

/**
 * Themeing functions for widget and points display.
 * Each of the functions below has a separate description of its own.
 */

/**
 * Preprocessing function for the widget in the alternate +1 style.
 */
function template_preprocess_vud_widget_alt(&$variables) {
  global $user;
  $cid = $variables['cid'];
  $type = $variables['type'];
  $tag = isset($variables['tag']) ? $variables['tag'] : variable_get('vud_tag', 'vote');

  drupal_add_css(drupal_get_path('module', 'vud') .'/vud.css');
  drupal_add_js(drupal_get_path('module', 'vud') .'/ajax_vud.js');

  $variables['points'] = theme('vud_points', $cid, $type, $tag, 'alt');
  if (user_access('use vote up/down') && ($user->uid)) {
    $criteria = array(
      'content_type' => $type,
      'content_id' => $cid,
      'uid' => _vud_get_uid(),
      'tag' => $tag,
    );
    $user_vote = votingapi_select_single_vote_value($criteria);

    if ($user_vote > 0) {
      $variables['class'] = 'vote-up-act';
    }
    else {
      $variables['class'] = 'vote-up-inact';
    }

    $token = drupal_get_token("vud/$type/$cid/1");
    $variables['title'] = url("vud/$type/$cid/1/$tag/1", array('query' => 'token='. $token));
    $variables['link'] = l('', "vud/$type/$cid/1/$tag", array(
                                                          'attributes' => array(
                                                 		    'class' => $variables['class'],
                                                 		    'title' => t('Vote up')
                                               			  ),
                                                          'query' => drupal_get_destination() .'&token='. $token,
                                                        )
                         );
  }
  else {
    $variables['class'] = 'up-inact';
    $variables['title'] = t('You must login to vote!');
  }
}

/**
 * Preprocess function for the points in the normal display style.
 */
function template_preprocess_vud_points(&$variables) {
  $tag = isset($variables['tag']) ? $variables['tag'] : variable_get('vud_tag', 'vote');

  $criteria = array(
    'content_type' => $variables['type'],
    'content_id' => $variables['cid'],
    'value_type' => 'points',
    'tag' => $tag,
    'function' => 'sum'
  );
  $vote_result = (int)votingapi_select_single_result_value($criteria);
  if ($vote_result > 0) {
    $variables['class'] = 'positive';
    $variables['points'] = '+'. $vote_result;
  }
  else {
    $variables['points'] = $vote_result;
    if ($vote_result < 0) {
      $variables['class'] = 'negative';
    }
    else {
      $variables['class'] = 'neutral';
    }
  }
  $variables['label'] = format_plural($vote_result, 'point', 'points');
  $variables['points_labelled'] = format_plural($vote_result, '1 point', '@count points');
  if (isset($variables['style'])) {
    $variables['template_files'][] = 'vud_points_'. $variables['style'];
  }
}

/**
 * Get a user ID for voting.
 */
function _vud_get_uid() {
  global $user;
  if ($user->uid) {
    $uid = $user->uid;
  }
  else {
    $uid = NULL;
  }
  return $uid;
}
