<?php
// $Id$

/**
 * @file
 * Implements the core voting module.
 */

module_load_include('inc', 'vud', 'vud.theme');  // Include the theme.inc file.

/**
 * Implementation of hook_help().
 */
function vud_help($path, $arg) {
  switch ($path) {
    case 'admin/help#vud':
      $output .= '<p>'. t('Provides a configurable up/down voting widget for other modules to use.') .'</p>';
      return $output;
  }
}

/**
 * Advanced menu settings callback.
 */
function vud_admin_advanced_settings() {
  $form['vote_widget_settings_advanced'] = array(
    '#type'  => 'fieldset',
    '#title' => t('General settings'),
  );
  $form['vote_widget_settings_advanced']['vud_tag'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Voting API tag'),
    '#default_value' => variable_get('vud_tag', 'vote'),
    '#description'   => t('Since Vote Up/Down uses Voting API, all votes will be tagged with this term. (default: vote)<br />This tag is useful is you have deployed various modules that use Voting API. It should always be a unique value. Usually, there is NO need to change this.'),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_menu().
 */
function vud_menu() {
  $items = array();

  $items['admin/settings/voteupdown'] = array(
    'title'            => 'Vote Up/Down',
    'description'      => 'Control the functioning of Vote Up/Down.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('vud_admin_advanced_settings'),
    'access arguments' => array('administer vote up/down'),
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['admin/settings/voteupdown/advanced'] = array(
    'title'  => 'General',
    'type'   => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['vote/%/%/%/%/%'] = array(
    'title'            => 'Vote',
    'page callback'    => 'vud_vote',
    'page arguments'   => array(1, 2, 3, 4, 5),
    'access arguments' => array('use vote up/down'),
    'type'             => MENU_CALLBACK,
  );

  $items['votereset/%/%/%/%'] = array(
    'title'            => 'Reset vote',
    'page callback'    => 'vud_reset',
    'page arguments'   => array(1, 2, 3, 4),
    'access arguments' => array('reset vote up/down votes'),
    'type'             => MENU_CALLBACK,
  );

  $items['user/%user/votes'] = array(
    'title'            => 'Your votes',
    'page callback'    => 'vud_user_votes',
    'page arguments'   => array(1),
    'access arguments' => array('access vote up/down statistics'),
    'type'             => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function vud_perm() {
  return array('use vote up/down', 'administer vote up/down', 'access vote up/down statistics', 'reset vote up/down votes');
}

/**
 * Menu callback; display all votes for a user.
 */
function vud_user_votes() {
  if ($account = user_load(array('uid' => arg(1), 'status' => 1))) {
    if ($account->status || user_access('administer users')) {
      $header = array(
        array('data' => t('Node')),
        array('data' => t('Vote')),
        array('data' => t('Date'))
      );
      $sql = db_rewrite_sql("SELECT n.nid, n.title, v.value, v.timestamp FROM {node} n LEFT JOIN {votingapi_vote} v
                             ON n.nid = v.content_id
                             WHERE v.uid = %d AND v.tag = '%s' AND v.content_type = 'node' AND n.status = 1
                             ORDER BY v.timestamp DESC");
      $result = pager_query($sql, 25, 0, NULL, $account->uid, variable_get('vud_tag', 'vote'));
      while ($node = db_fetch_object($result)) {
        $rows[] = array(
          l($node->title, 'node/'. $node->nid),
          $node->value,
          t('!time ago', array('!time' => format_interval(time() - $node->timestamp)))
        );
      }
      drupal_set_title(check_plain($account->name));
      $output = theme('table', $header, $rows);
      $output .= theme('pager', NULL, 25);

      return $output;
    }
    else {
      drupal_access_denied();
    }
  }
  else {
    drupal_not_found();
  }
}

/**
 * Function for the main voting handler with Ajax support.
 */
function vud_vote($type, $cid, $value, $tag, $token) {
  if (is_numeric($cid) && is_numeric($value) && drupal_valid_token($token, "vote/$type/$cid/$value/$tag")) {
    $vote = array();
    // Sanity-check the incoming values.
    if ($value > 0) {
      $vote['value'] = 1;
    }
    else if ($value < 0) {
      $vote['value'] = -1;
    }
    else {
      $vote['value'] = 0;
    }

    $vote['value_type'] = 'points';
    $tag = $tag ? $tag : variable_get('vud_tag', 'vote');
    $vote['tag'] = $tag;

    // Do the voting via Voting API.
    if ($vote['value'] == 0) {
      $criteria = array(
        'content_type' => $type,
        'content_id' => $cid,
        'tag' => $tag
      );
      votingapi_delete_votes(votingapi_select_votes($criteria));
      votingapi_recalculate_results($type, $cid);
    }
    else {
      $vote['content_id'] = $cid;
      $vote['content_type'] = $type;
      $vote['tag'] = $tag;
      $votes = array(0 => $vote);
      votingapi_set_votes($votes);
    }
  }
  else {
    watchdog("vud", "Could not vote on $type $cid, with value $value, tag $tag and token $token");
  }

  if ($_SERVER['HTTP_X_REQUESTED_WITH'] == 'XMLHttpRequest') {
    $result_criteria = array(
      'content_type' => $type,
      'content_id' => $cid,
      'value_type' => 'points',
      'tag' => $tag,
      'function' => 'sum'
    );
    $vote_result = (int) votingapi_select_single_result_value($result_criteria);
    $f_vote_result = format_plural($vote_result, '1 vote', '@count votes');
    $js = array(
      'fullvotes' => $f_vote_result,
      'votes'     => $vote_result,
      'type'      => $type,
      'id'        => $cid,
      'value'     => $value,
      'tag'       => $tag,
    );
    drupal_json($js);
    exit;
  }
  else {
    drupal_goto($_SERVER['HTTP_REFERER']);
  }
}

/**
 * Callback to reset votes on an object.
 */
function vud_reset($type, $cid, $tag, $token) {
  if (is_numeric($cid) && drupal_valid_token($token, "vote/$type/$cid/$value/$tag")) {
    return "Hello World";
  }
}
