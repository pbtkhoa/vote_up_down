<?php
// $Id$

/**
 * @file
 * Adds a voting widget to comments.
 */

/**
 * Implementation of hook_perm().
 */
function vud_comment_perm() {
  return array('administer vote up/down on comments', 'use vote up/down on comments');
}

/**
 * Implementation of hook_menu().
 */
function vud_comment_menu() {
  $items = array();
  $items['admin/settings/voteupdown/comment'] = array(
    'title'            => 'Comments',
    'description'      => 'Vote Up/Down Comment settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('vud_comment_admin_settings'),
    'access arguments' => array('administer vote up/down on comments'),
    'type'             => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Menu callback for administration settings.
 */
function vud_comment_admin_settings() {
  $form['vud_comment_node_types'] = array(
    '#type'          => 'checkboxes',
    '#title'       => t('Node types'),
    '#description' => t('Select the node types for which voting on comments will be activated.'),
    '#default_value' => variable_get('vud_comment_node_types', array()),
    '#options'       => node_get_types('names'),
  );
  $form['vud_comment_widget'] = array(
    '#type'          => 'radios',
    '#title'       => t('Widget selection'),
    '#description' => t('Select the voting widget theme that will be displayed.'),
    '#default_value' => variable_get('vud_comment_widget', 'plain'),
    '#options'       => vud_widget_get_names(),
  );
  $form['vud_comment_votes'] = array(
    '#type'          => 'radios',
    '#title'       => t('Votes display'),
    '#description' => t('Choose if the total number of votes will be displayed in the links part.'),
    '#default_value' => variable_get('vud_comment_votes', 1),
    '#options'       => array(0 => 'No', 1 => 'Yes'),
  );
  $form['vud_comment_reset'] = array(
    '#type'          => 'radios',
    '#title'       => t('Votes reset'),
    '#description' => t('Choose if users are allowed to reset their vote on a comment.'),
    '#default_value' => variable_get('vud_comment_reset', 0),
    '#options'       => array(0 => 'No', 1 => 'Yes'),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_comment().
 */
function vud_comment_comment(&$comment, $op) {
  switch ($op) {
    case 'view':
      $type = _vud_comment_get_node_type($comment->nid);
      $comment_allow = in_array($type, variable_get('vud_comment_node_types', array()), TRUE);
      if ($comment_allow && user_access('use vote up/down on comments')) {
        $tag = variable_get('vud_tag', 'vote');
        $widget = variable_get('vud_comment_widget', 'plain');
        $comment->comment = theme('vud_widget', $comment->cid, 'comment', $tag, $widget) . $comment->comment;
      }
      break;
  }
}

/**
 * Function to return the node type of a particular node ID.
 */
function _vud_comment_get_node_type($nid) {
  return db_result(db_query("SELECT type from {node} where nid = %d", $nid));
}

/**
 * Implementation of hook_theme().
 */
function vud_comment_theme() {
  return array(
    'vud_widget' => array(
      'arguments' => array('cid'  => NULL, 'type' => NULL, 'tag' => NULL, 'widget_theme' => NULL),
      'function'  => 'vud_widget_proxy',
    ),
    'vud_votes' => array(
      'arguments' => array('cid'  => NULL, 'type' => NULL, 'tag' => NULL, 'widget_theme'  => NULL),
      'function'  => 'vud_votes_proxy',
    ),
  );
}

/**
 * Implementation of hook_link().
 */
function vud_comment_link($type, $object, $teaser = FALSE) {
  $links = array();
  switch ($type) {
    case 'comment':
      $comment = &$object;
      $votes_display_mode = variable_get('vud_comment_votes', 1);
      $widget_theme = variable_get('vud_comment_widget', 'plain');
      $tag = variable_get('vud_tag', 'vote');
      if ($votes_display_mode) {
        $links['vud_comment_votes_count'] = array(
          'title' => theme('vud_votes', $comment->cid, $type, $tag, $widget_theme),
          'html' => TRUE,
        );
      }
      if (variable_get('vud_comment_reset', 0)) {
        $reset_token = drupal_get_token("votereset/comment/$comment->cid/$tag");
        $links['vud_comment_votes_reset_link'] = array(
          'title' => t('Reset your vote'),
          'href'  => "votereset/comment/$comment->cid/$tag/$reset_token",
          'html'  => TRUE,
        );
      }
      break;
  }
  return $links;
}
